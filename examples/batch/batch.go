package main

import (
	"context"
	"errors"
	"fmt"

	pgx "github.com/jackc/pgx/v5"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
)

type PgxIface interface {
	Begin(context.Context) (pgx.Tx, error)
	Close()
}

func databaseSetup(db PgxIface) (err error) {

	// Initialize a database object
	tx, err := db.Begin(context.Background())
	if err != nil {
		return fmt.Errorf("databaseSetup: %s", err)
	}
	// Finally, commit changes or rollback
	defer func() {
		switch err {
		case nil:
			err = tx.Commit(context.Background())
		default:
			_ = tx.Rollback(context.Background())
		}
	}()

	// Create a new table 'ledger'
	sql := `CREATE TABLE IF NOT EXISTS ledger (
		id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		description TEXT NOT NULL,
		amount BIGINT NOT NULL);`

	// Execute SQL commands
	_, err = tx.Exec(context.Background(), sql)
	if err != nil {
		return fmt.Errorf("databaseSetup: %s", err)
	}

	return err
}

func requestBatch(db PgxIface) (err error) {

	// Initialize a database object
	tx, err := db.Begin(context.Background())
	if err != nil {
		return fmt.Errorf("requestBatch: %s", err)
	}
	// Finally, commit changes or rollback
	defer func() {
		switch err {
		case nil:
			err = tx.Commit(context.Background())
		default:
			_ = tx.Rollback(context.Background())
		}
	}()

	// Create a Batch object
	batch := &pgx.Batch{}

	// Add SQL commands to queue
	batch.Queue(
		`INSERT INTO ledger(description, amount) VALUES ($1, $2), ($3, $4)`,
		"first item", 1, "second item", 2)

	batch.Queue("SELECT * FROM ledger")
	batch.Queue("SELECT * FROM ledger WHERE amount = 1")

	// Efficiently transmits queued queries as a single transaction.
	// After the queries are run, a BatchResults object is returned.
	br := tx.SendBatch(context.Background(), batch)
	if br == nil {
		return errors.New("SendBatch returns a NIL object")
	}
	defer br.Close()

	// Iterate over a batch of queued queries
	for _, query := range batch.QueuedQueries {

		// Print SQL statement of the current query
		fmt.Println(query.SQL)

		// BatchResult.Query reads results from the current query
		rows, err := br.Query()
		if err != nil {
			return fmt.Errorf("requestBatch: %s", err)
		}

		// Iterate over the results to print each selected row
		var id, amount int64
		var descr string
		_, err = pgx.ForEachRow(rows, []any{&id, &descr, &amount}, func() error {
			fmt.Printf("  (%v, \"%v\", %v)\n", id, descr, amount)
			return nil
		})
		fmt.Println("")

		if err != nil {
			return fmt.Errorf("requestBatch: %s", err)
		}
	}
	return err
}

func databaseCleanup(db PgxIface) (err error) {

	// Initialize a database object
	tx, err := db.Begin(context.Background())
	if err != nil {
		return fmt.Errorf("databaseCleanup: %s", err)
	}
	// Finally, commit changes or rollback
	defer func() {
		switch err {
		case nil:
			err = tx.Commit(context.Background())
		default:
			_ = tx.Rollback(context.Background())
		}
	}()

	// Delete all rows in table ledger
	sql := `DELETE FROM ledger ;`

	// Execute SQL commands
	_, err = tx.Exec(context.Background(), sql)
	if err != nil {
		return fmt.Errorf("databaseCleanup: %s", err)
	}

	return err
}

func main() {

	// @NOTE: the real connection is not required for tests
	db, err := pgxpool.New(context.Background(), "postgres://<user>:<password>@<hostname>/<database>")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	// Create a database table
	if err = databaseSetup(db); err != nil {
		panic(err)
	}

	// Create and send a batch request
	if err = requestBatch(db); err != nil {
		panic(err)
	}

	// Delete all rows in table ledger
	if err = databaseCleanup(db); err != nil {
		panic(err)
	}
}
